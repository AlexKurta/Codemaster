{"version":3,"sources":["constants.js","redux/reducer/catalog.js","redux/reducer.js","redux/middlewares/api.js","redux/configureStore.js","redux/index.js","Utils.js","components/Subsection.js","components/Product.js","components/Catalog.js","active creators/index.js","App.js","serviceWorker.js","index.js"],"names":["LOAD_CATALOG","defaultCatalog","loading","loaded","catalog","reducer_catalog","catalogState","arguments","length","undefined","action","type","response","Object","objectSpread","reducer","history","combineReducers","router","connectRouter","api","store","next","callApi","rest","objectWithoutProperties","fetch","then","res","json","catch","error","createBrowserHistory","preloadedState","createStore","createRootReducer","compose","applyMiddleware","routerMiddleware","getDataForCurrentUrl","arr","url","i","sections","Subsection","_this$props","this","props","name","img","react_default","a","createElement","className","Card","style","width","Img","variant","src","Body","Title","Link","to","React","Component","Product","description","Text","Catalog","loadCatalog","catalogItems","push","components_Subsection","key","id","components_Product","connect","state","ownProps","App","getCatalog","_ref","location","Container","components_Catalog","pathname","Route","path","render","Boolean","window","hostname","match","ReactDOM","es","esm","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ee2df8a6.chunk.js","sourcesContent":["export const LOAD_CATALOG = 'LOAD_CATALOG'\r\nexport const START = '_START'\r\nexport const SUCCESS = '_SUCCESS'\r\nexport const FAIL = '_FAIL'\r\n","import { LOAD_CATALOG, START, SUCCESS } from '../../constants'\r\n\r\nconst defaultCatalog = {\r\n  loading: false,\r\n  loaded: false,\r\n  catalog: [],\r\n}\r\n\r\nexport default (catalogState = defaultCatalog, action) => {\r\n  const { type, response } = action\r\n  switch (type) {\r\n    //start loading\r\n    case LOAD_CATALOG + START:\r\n      return { ...catalogState, loading: true, loaded: false }\r\n\r\n    //catalog loaded\r\n    case LOAD_CATALOG + SUCCESS:\r\n      return {\r\n        ...catalogState,\r\n        catalog: response,\r\n        loading: false,\r\n        loaded: true,\r\n      }\r\n\r\n    default:\r\n      return catalogState\r\n  }\r\n}\r\n","import { combineReducers } from 'redux'\r\nimport { connectRouter } from 'connected-react-router'\r\nimport catalog from './reducer/catalog'\r\n\r\nexport default history =>\r\n  combineReducers({\r\n    router: connectRouter(history),\r\n    catalog,\r\n  })\r\n","import { START, SUCCESS, FAIL } from '../../constants'\r\n\r\nexport default store => next => action => {\r\n  const { callApi, type, ...rest } = action\r\n  if (!callApi) return next(action)\r\n\r\n  next({\r\n    ...rest,\r\n    type: type + START,\r\n  })\r\n\r\n  fetch(callApi)\r\n    .then(res => res.json())\r\n    .then(response => next({ ...rest, type: type + SUCCESS, response }))\r\n    .catch(error => next({ ...rest, type: type + FAIL, error }))\r\n}\r\n","import { createBrowserHistory } from 'history'\r\nimport { applyMiddleware, compose, createStore } from 'redux'\r\nimport { routerMiddleware } from 'connected-react-router'\r\nimport createRootReducer from './reducer'\r\nimport api from '../redux/middlewares/api'\r\n\r\nexport const history = createBrowserHistory()\r\n\r\nexport default function configureStore(preloadedState) {\r\n  const store = createStore(\r\n    createRootReducer(history),\r\n    preloadedState,\r\n    compose(applyMiddleware(routerMiddleware(history), api))\r\n  )\r\n\r\n  return store\r\n}\r\n","import configureStore from './configureStore'\r\n\r\nconst store = configureStore()\r\n\r\nexport default store\r\n","export function getDataForCurrentUrl(arr, url) {\r\n  if (arr.length) {\r\n    for (let i = 0; i < arr.length; i++) {\r\n      if (arr[i].url !== url) {\r\n        if (arr[i].sections) {\r\n          const res = getDataForCurrentUrl(arr[i].sections, url)\r\n          if (res) return res\r\n        }\r\n      } else {\r\n        return arr[i].sections\r\n      }\r\n    }\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { Card } from 'react-bootstrap'\r\nimport { Link } from 'react-router-dom'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass Subsection extends React.Component {\r\n  static propTypes = {\r\n    // from Catalog\r\n    name: PropTypes.string.isRequired,\r\n    url: PropTypes.string.isRequired,\r\n    img: PropTypes.string.isRequired,\r\n  }\r\n\r\n  render() {\r\n    const { name, url, img } = this.props\r\n    return (\r\n      <div className=\"col-3 m-4\">\r\n        <Card style={{ width: '18rem' }}>\r\n          <Card.Img variant=\"bottom\" src={img} />\r\n          <Card.Body>\r\n            <Card.Title>{name}</Card.Title>\r\n            <Link to={url}>See more</Link>\r\n          </Card.Body>\r\n        </Card>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Subsection\r\n","import React from 'react'\r\nimport { Card } from 'react-bootstrap'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass Product extends React.Component {\r\n  static propTypes = {\r\n    // from Catalog\r\n    name: PropTypes.string.isRequired,\r\n    description: PropTypes.string.isRequired,\r\n    img: PropTypes.string.isRequired,\r\n  }\r\n\r\n  render() {\r\n    const { name, img, description } = this.props\r\n    return (\r\n      <Card style={{ width: '28rem' }} className=\"m-3\">\r\n        <Card.Body>\r\n          <Card.Title className=\"text-center\">{name}</Card.Title>\r\n          <Card.Img src={img} />\r\n          <Card.Text>{description}</Card.Text>\r\n        </Card.Body>\r\n      </Card>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Product\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { loadCatalog } from '../active creators'\r\nimport { getDataForCurrentUrl } from '../Utils'\r\nimport Subsection from './Subsection'\r\nimport Product from './Product'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass Catalog extends React.Component {\r\n  static propTypes = {\r\n    // from connect\r\n    loading: PropTypes.bool.isRequired,\r\n    loaded: PropTypes.bool.isRequired,\r\n    loadCatalog: PropTypes.func.isRequired,\r\n    catalog: PropTypes.arrayOf(PropTypes.object),\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { loading, loaded, loadCatalog } = this.props\r\n    if (!loaded && !loading) loadCatalog()\r\n  }\r\n\r\n  render() {\r\n    const { catalog } = this.props\r\n    const catalogItems = []\r\n\r\n    if (catalog) {\r\n      for (let i = 0; i < catalog.length; i++) {\r\n        if (catalog[i].sections) {\r\n          catalogItems.push(\r\n            <Subsection\r\n              name={catalog[i].name}\r\n              url={catalog[i].url}\r\n              img={catalog[i].img}\r\n              key={catalog[i].id}\r\n            />\r\n          )\r\n        } else {\r\n          catalogItems.push(\r\n            <Product\r\n              name={catalog[i].name}\r\n              img={catalog[i].img}\r\n              description={catalog[i].description}\r\n              key={catalog[i].id}\r\n            />\r\n          )\r\n        }\r\n      }\r\n    } else return null\r\n\r\n    return <div className=\"test__catalog--container\">{catalogItems}</div>\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  (state, ownProps) => {\r\n    return {\r\n      catalog:\r\n        ownProps.url === '/'\r\n          ? state.catalog.catalog\r\n          : getDataForCurrentUrl(state.catalog.catalog, ownProps.url),\r\n      loading: state.catalog.loading,\r\n      loaded: state.catalog.loaded,\r\n    }\r\n  },\r\n  { loadCatalog }\r\n)(Catalog)\r\n","import { LOAD_CATALOG } from '../constants'\r\n\r\nexport function loadCatalog() {\r\n  return {\r\n    type: LOAD_CATALOG,\r\n    callApi: '../../catalogTree.json',\r\n  }\r\n}\r\n","import React from 'react'\nimport { Route } from 'react-router-dom'\nimport Catalog from './components/Catalog'\nimport { Container } from 'react-bootstrap'\n\nimport './App.css'\n\nclass App extends React.Component {\n  getCatalog = ({ location }) => {\n    return (\n      <Container className=\"row\">\n        <Catalog url={location.pathname} />\n      </Container>\n    )\n  }\n\n  render() {\n    return <Route path=\"/\" render={this.getCatalog} />\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport store from './redux'\nimport { ConnectedRouter } from 'connected-react-router'\nimport { history } from './redux/configureStore'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <Provider store={store}>\n    <ConnectedRouter history={history}>\n      <App />\n    </ConnectedRouter>\n  </Provider>,\n  document.getElementById('root')\n)\n\nserviceWorker.unregister()\n"],"sourceRoot":""}